%This function computes the test statistic and the simulated critical value
%for the nondegenerate Vuong test in Shi (2013). The computation follows
%suggestions in Section 3 of the paper to choose c and to compute the
%supremum. 
%
%The function takes as input:
%
% logFi:     string variable, the name of the log-density function of model
%            F. The will be used as:
%            [logf,d_logf,d2_logf]=logfi(data,theta_hat),  
%            where logf is log of the density (n*1), d_logf is the first
%            derivative (n*d_F), d2_logf is the vectorized second
%            derivative (n*(d_F^2)), data is the data matrix (n rows), and
%            theta_hat is the maximum likelihood estimator of the
%            parameter.
%
% logGi:     string variable, the name of the log-density function of model
%            G. It should be of similar structure as logfi.
%
% data:      the data matrix, with number of rows equal to the number of
%            observations and number of columns equal to number of
%            variables.
%
% theta_hat: MLE of the parameter of model F, d_F*1
%
% beta_hat:  MLE of the parameter of model G, d_G*1
%
% alpha:     significance level. scalar in (0,1).
%
% rs:        random stream generated by RandStream.create used to control
%            the random sequence used in the simulation.
%
% S_cv:      number of simulation draws used to simulate the quantile.
%            Should be at least 1000.
%
%The function produces three outputs:
%
% cstar:     data dependent choice of c
%
% cv:        critical value
%
% Tnd:       test statistic   (Both cv and Tnd may vary with significance
%            level because cstar depends on significance level.)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [Tnd, cv, cstar] = ndVuong(logFi,logGi,data,theta_hat,beta_hat,alpha,rs,S_cv)

d_F = length(theta_hat);
d_G = length(beta_hat);
k = d_F+d_G;
n = length(data(:,1));

%Compute the log-density vector and the first and second derivaties of it
eval(['[logf,d_logf,d2_logf] = ',logFi,'(data,theta_hat);']);
eval(['[logg,d_logg,d2_logg] = ',logGi,'(data,beta_hat);']);

%A_hat:
A_hat = [reshape(sum(d2_logf),d_F,d_F),zeros(d_F,d_G);...
         zeros(d_G,d_F),-reshape(sum(d2_logg),d_G,d_G)]/n;
     
%B_hat:
meandL = mean([d_logf,-d_logg]);
dmeandL = [d_logf,-d_logg] - repmat(meandL,n,1);
B_hat = dmeandL'*dmeandL/n+10^(-12)*eye(k);
        
W_hat = (sqrtm(B_hat)/A_hat)*sqrtm(B_hat);
[~,V]=eig(W_hat);
  

vecV = diag(V);
abs_vecV = abs(vecV)-max(abs(vecV));
rho_star = 1*(abs_vecV==0);
rnorm = rho_star'*rho_star;
rho_star = sqrt(rnorm)^(-1)*rho_star;

Z0 = randn(rs,S_cv,k+1);

VZ = [1,rho_star';rho_star,eye(k)];

Z = Z0*sqrtm(VZ+10^(-12)*eye(k+1));

Z_L = Z(:,1);            %$Z_Lambda$
Z_p = Z(:,2:k+1);        %$Z_phi^\ast$

%trace(V)  %diagonostic line

trVsq = trace(V^2);
Vnmlzd = V/sqrt(trVsq);   %V, normalized by sqrt(trVsq);

J_Lmod = @(sig,c)sig*Z_L - (Z_p.^2)*diag(Vnmlzd)/2+ trace(Vnmlzd)/2;

J_omod = @(sig,c)sig^2 - 2*sig*Z_p*Vnmlzd*rho_star + ...
                                       (Z_p.^2)*(diag(Vnmlzd).^2) + c;
                                  
quant = @(sig,c)quantile(abs(J_Lmod(sig,c)./sqrt(max(1e-10,J_omod(sig,c)))),1-alpha);

                                  % quantile as a function of sigma and c.
                                  % the lower bound 1e-10 is used so that
                                  % inf does not appear as a value of
                                  % quant; doing so ensures stability of
                                  % the solution.
               
sigstar = @(c)fminbnd(@(sig)-quant(sig,c),0,5);

cv0 = quant(sigstar(0),0);        % critical value with c=0

z_normal = norminv(1-alpha/2);
z_nor_sim = max(z_normal,quantile(abs(Z_L),1-alpha)); %simulated z_normal

if cv0 - z_nor_sim <= 0.1;  % if critical value with c=0 is not very big
 
    cv = max(cv0,z_normal);                     % use c = 0
    
    cstar = 0;
    
else                              % otherwise, increase c.

    Func = @(c)((quant(sigstar(c),c)-z_nor_sim)-0.1)^2;
    cstar = fminbnd(Func,0,10);
    cv = max(quant(sigstar(cstar),cstar),z_normal);
end

%Computing the ND test statistic:
nLR_hat = sum(logf-logg);         %sample log-likelihood ratio times n

nomega2_hat = (logf-logg)'*(logf-logg) - nLR_hat^2/n;
                                      %n times sample variance of \Lambda_i    
%Non-degenerate Vuong Tests    
Tnd = (nLR_hat+trace(V)/2)/sqrt(nomega2_hat + cstar*trace(V.^2));


















